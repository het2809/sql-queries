

-- TO MAKE TABLE
CREATE TABLE PEOPLE
(ID INT PRIMARY KEY AUTO_INCREMENT,
	NAME VARCHAR(50) DEFAULT "JOHN",
	AGE INT NOT NULL,
    ROLL VARCHAR(50) DEFAULT "EMPLOYED");

-- TO INSERT DETAILS    
INSERT INTO PEOPLE 
(NAME , AGE)
VALUE ("DIVY" , 22);

INSERT INTO PEOPLE (NAME , AGE)
VALUE ("HET" , 18),
	("JENIL" , 21),
    ("RAJ" , 21);

-- TO UPDATE TABLE
UPDATE PEOPLE SET NAME = "BHAUTIK"
WHERE NAME = "JENIL";

-- TO CONCAT INFORMATION
SELECT CONCAT(AUTHOR_FNAME , ' ', AUTHOR_LNAME)FROM BOOKS;

-- TO SUBSTING INFORMATION
SELECT SUBSTRING(AUTHOR_FNAME , 1 , 5) FROM BOOKS;

-- TO COMBINE FUNCTIONS
SELECT CONCAT(SUBSTRING(AUTHOR_FNAME , 1 , 5),'...')FROM BOOKS;

-- TO REPLACE INFORMATION
SELECT REPLACE("HELLO WORLD" , "H" , "E");

-- ASC/DESC ORDER LIST
SELECT * FROM BOOKS ORDER BY AUTHOR_FNAME;

-- TO REVERSE INFORMATION OF TABLE
SELECT REVERSE(AUTHOR_FNAME) FROM BOOKS;

-- KNOW LENGTH OF COLUMNS
SELECT CHAR_LENGTH(AUTHOR_FNAME) FROM BOOKS;

USE BOOKS;
-- TO MAKE ALL INFORMATION UPPERCASE
SELECT UPPER(AUTHOR_FNAME) FROM BOOKS;

-- TO MAKE ALL INFORMATION lowercase
SELECT LOWER(AUTHOR_LNAME) FROM BOOKS;

-- TO DISTINCT INFORMATION
SELECT DISTINCT(AUTHOR_FNAME) FROM BOOKS;

SELECT DISTINCT CONCAT(author_fname,' ', author_lname) FROM books;

SELECT DISTINCT CONCAT(author_fname,' ', author_lname) FROM books LIMIT 5;

-- TO FIND INFORMATION
SELECT * FROM BOOKS WHERE AUTHOR_FNAME LIKE "%DA%";

-- TO COUNT INFORMATION
SELECT COUNT(*) FROM BOOKS;

-- GROUP BY
SELECT AUTHOR_FNAME , COUNT(AUTHOR_FNAME) FROM BOOKS GROUP BY AUTHOR_FNAME;

-- TO FIND MAXIMUM_MINIMUM INFORMATION
SELECT MAX(PAGES) FROM BOOKS;

SELECT MIN(PAGES) FROM BOOKS;

-- SUBQUERIES
SELECT * FROM books 
WHERE released_year = (SELECT MIN(released_year) FROM books);

-- TO KNOW HOW MUCH BOOKS AUTHOR HAD WRITTEN
SELECT CONCAT(author_fname, ' ', author_lname) AS author,  COUNT(*)
FROM books
GROUP BY author;

SELECT 
	author_lname, 
	COUNT(*) as books_written, 
	MAX(released_year) AS latest_release,
	MIN(released_year)  AS earliest_release,
	MAX(pages) AS longest_page_count
FROM books GROUP BY author_lname;

SELECT author_lname, COUNT(*), SUM(pages)
FROM books
GROUP BY author_lname;

SELECT 
    released_year, 
    AVG(stock_quantity), 
    COUNT(*) FROM books
GROUP BY released_year;

-- NOT EQUAL TO
SELECT * FROM BOOKS
WHERE AUTHOR_FNAME != "DAVID";

-- NOT LIKE
SELECT * FROM BOOKS
WHERE AUTHOR_FNAME NOT LIKE "%NE%";

-- GREATER THAN
SELECT * FROM BOOKS 
WHERE RELEASED_YEAR > 2001;

-- LESS THAN
SELECT * FROM BOOKS
WHERE RELEASED_YEAR < 2001;

-- AND
SELECT * FROM BOOKS
WHERE AUTHOR_LNAME = "EGGERS"
AND RELEASED_YEAR > 2010
AND TITLE LIKE "%NOVEL%";

-- OR
SELECT * FROM BOOKS
WHERE AUTHOR_LNAME = "EGGERS"
OR RELEASED_YEAR > 2010;

-- BETWEEN
SELECT * FROM BOOKS
WHERE RELEASED_YEAR BETWEEN 2004 AND 2015 ORDER BY RELEASED_YEAR;

-- NOT BETWEEN
SELECT * FROM BOOKS
WHERE RELEASED_YEAR NOT BETWEEN 2004 AND 2015 ORDER BY RELEASED_YEAR;

-- IN
SELECT * FROM BOOKS
WHERE AUTHOR_LNAME IN("LAHIRI" , "SMITH" , "CARVER");

-- NOT IN
SELECT * FROM BOOKS
WHERE AUTHOR_LNAME NOT IN("LAHIRI" , "SMITH" , "CARVER");

SELECT * FROM BOOKS
WHERE RELEASED_YEAR >= 2000
AND RELEASED_YEAR NOT IN (2000,2002,2004,2006,2008,2010,2012,2014,2016)
ORDER BY RELEASED_YEAR;

SELECT * FROM BOOKS
WHERE RELEASED_YEAR >= 2000
AND RELEASED_YEAR % 2 = 1;

SELECT TITLE , AUTHOR_FNAME ,
CASE 
WHEN RELEASED_YEAR >=2000 THEN "MODERN LIT"
ELSE "20th CENTURY LIT"  
END AS GENRE
FROM BOOKS;

SELECT STOCK_QUANTITY , TITLE,
CASE
WHEN STOCK_QUANTITY BETWEEN 0 AND 50 THEN "*"
WHEN STOCK_QUANTITY BETWEEN 50 AND 100 THEN "**"
ELSE "***"
END AS STOCK
FROM BOOKS;

SELECT * ,
CASE
WHEN title like "%stories%" THEN "short stories"
    WHEN title = 'Just Kids' THEN 'Memoir' 
    WHEN title = 'A Heartbreaking Work of Staggering Genius' THEN 'Memior'
else "Novel"
END AS TYPE
FROM BOOKS;

SELECT AUTHOR_FNAME , AUTHOR_LNAME, 
CASE
 WHEN count(*) = 1 THEN "1 book"
ELSE CONCAT(count(*)," books")
END AS COUNT
FROM BOOKS group by author_fname , author_lname;